%{
    #import "ZHNOCParser.h"
    #import "ZHNOCPointerWordNode.h"
    #import "ZHNOCNode.h"
    #import "ZHNOCAssignmentNode.h"
    #import "ZHNOCMethodNode.h"
    #import "ZHNOCAssembleNode.h"
    #import "ZHNOCIfElseNode.h"
    #import "ZHNOCIfElseListNode.h"
    #import "ZHNOCIfElseCondition.h"
    #import "ZHNConditionNode.h"
    #import "ZHNOCGetSetNode.h"
    #import "ZHNOCReturnNode.h"
    #import "ZHNOCParseredNodeManager.h"
    #import "ZHNOCStructNode.h"
    #import "ZHNOCBlockNode.h"
    #import "ZHNOCPPMMNode.h"
    #import "ZHNOCForCycleNode.h"
    #import "ZHNOCForInCycleNode.h"
    
    static NSMutableArray* gblObjs = nil;
    void retainObj(id obj);
    void releaseObjs(void);
    ZHNOCIfElseCondition* instanceCondition(BOOL success,id value);
    int yylex(void);
    void yyerror(char *s);
%}

%union {
    int p_int;
    float p_float;
    double p_double;
    __unsafe_unretained NSString *p_word;
    __unsafe_unretained id P_OBJ;
}

%left IF ELSEIF ELSE
%left PLUS MINUS
%left DIVIDE POINTER

%token <p_int> IF ELSEIF ELSE
%token <p_int> OC_YES OC_NO
%token <p_double> NUM PLUSPLUS MINUSMINUS
%token <p_word> WORD
%token <p_word> OC_STRING
%token <p_word> FOR IN
%token <P_OBJ> OC_NIL
%token <p_word> EQUALTO NOT_EQUALTO GTEATER_OR_EQUALTO LESS_OR_EQUALTO JUDGE_AND JUDGE_OR
%token <P_OBJ> RETURN

// 语法
%type <P_OBJ> param;
%type <P_OBJ> expr;
%type <P_OBJ> expr_list;
%type <P_OBJ> statement_expr;
%type <p_word> statement;
%type <P_OBJ> method;
%type <P_OBJ> method_param_list;
%type <P_OBJ> method_param;
%type <p_word> method_param_name;
%type <P_OBJ> method_target;
%type <P_OBJ> expr_value;

%type <P_OBJ> expr_judge;
%type <P_OBJ> expr_judge_list;
%type <P_OBJ> expr_if_else_judge;
%type <P_OBJ> expr_if_else;
%type <P_OBJ> expr_if;
%type <P_OBJ> expr_else;
%type <P_OBJ> expr_else_if;
%type <P_OBJ> expr_else_if_list;
%type <P_OBJ> expr_get_set;

%type <P_OBJ> expr_struct
%type <P_OBJ> expr_struct_value
%type <P_OBJ> expr_struct_value_list

%type <P_OBJ> block_expr
%type <p_word> block_return
%type <P_OBJ> block_params

%type <p_double> calculate_expr

%type <P_OBJ> ppmm_expr // ++ --

%type <P_OBJ> for_expr
%%

param :
|expr_list {
    ZHNOCNode *node = $1;
    node.isRoot = YES;
    ZHNOCParseredNodeManager *manager = [ZHNOCParseredNodeManager sharedManager];
    manager.rootNode = node;
    releaseObjs();
}
;

expr_list : {
    ZHNOCAssembleNode *node = [ZHNOCAssembleNode ocnode];
    $$ = node;
    retainObj(node);
}
|expr_list expr {
    ZHNOCAssembleNode *node = $1;
    [node addNode:$2];
}
;

expr :
|statement_expr {
    $$ = $1;
}
|expr_if_else {
    $$ = $1;
}
|block_expr {
    $$ = $1;
}
|for_expr {
    $$ = $1;
}
;

expr_if_else :
| expr_if {
    $$ = $1;
}
|expr_if expr_else_if_list {
    ZHNOCIfElseListNode *node = $1;
    [node addNodesFromArray:$2];
    $$ = node;
}
| expr_if expr_else {
    ZHNOCIfElseListNode *node = $1;
    [node addNode:$2];
    $$ = node;
}
| expr_if expr_else_if_list expr_else {
    ZHNOCIfElseListNode *node = $1;
    [node addNodesFromArray:$2];
    [node addNode:$3];
    $$ = node;
}
;

expr_else_if_list: {
    NSMutableArray *ary = [NSMutableArray array];
    $$ = ary;
    retainObj(ary);
}
|expr_else_if expr_else_if_list   {
    NSMutableArray *ary = $2;
    [ary addObject:$1];
    $$ = ary;
}
;

expr_if :
|IF '(' expr_judge_list ')' '{' expr_list '}'  {
    ZHNOCIfElseListNode *listNode = [ZHNOCIfElseListNode ocnode];
    ZHNOCIfElseNode *node = [ZHNOCIfElseNode nodeWithCondition:$3 type:ZHNOCIfElseNodeType_if assemble:$6];
    [listNode addNode:node];
    $$ = listNode;
    retainObj(listNode);
    retainObj(node);
}
;

expr_else_if :
|ELSEIF '(' expr_judge_list ')' '{' expr_list '}' {
    ZHNOCIfElseNode *node = [ZHNOCIfElseNode nodeWithCondition:$3 type:ZHNOCIfElseNodeType_elseif assemble:$6];
    $$ = node;
    retainObj(node);
}
;

expr_else :
|ELSE '{' expr_list '}' {
    ZHNOCIfElseNode *node = [ZHNOCIfElseNode nodeWithCondition:nil type:ZHNOCIfElseNodeType_else assemble:$3];
    $$ = node;
    retainObj(node);
}
;

block_expr :
|'^' '(' block_params ')' '{' expr_list '}' {
    ZHNOCBlockNode *node = [[ZHNOCBlockNode alloc] init];
    [node addBlockParams:$3];
    node.assembleNode = $6;
    node.returnType = nil;
    $$ = node;
    retainObj(node);
}
|'^' block_return '(' block_params ')' '{' expr_list '}' {
    ZHNOCBlockNode *node = [[ZHNOCBlockNode alloc] init];
    [node addBlockParams:$4];
    node.assembleNode = $7;
    node.returnType = $2;
    $$ = node;
    retainObj(node);
}
;

block_return :
| WORD {
    $$ = $1;
}
| WORD POINTER {
    $$ = @"*";
}
;

block_params :{
    NSMutableArray *ary = [NSMutableArray array];
    $$ = ary;
    retainObj(ary);
}
|WORD WORD {
    NSMutableArray *ary = [NSMutableArray array];
    $$ = ary;
    retainObj(ary);
    ZHNOCBlockParam *param = [[ZHNOCBlockParam alloc] init];
    param.paramType = ZHNOCBlockParamType_num;
    param.name = $2;
    [ary addObject:param];
}
|WORD POINTER WORD {
    NSMutableArray *ary = [NSMutableArray array];
    $$ = ary;
    retainObj(ary);
    ZHNOCBlockParam *param = [[ZHNOCBlockParam alloc] init];
    param.paramType = ZHNOCBlockParamType_pointer;
    param.name = $3;
    [ary addObject:param];
}
|block_params ',' WORD WORD {
    ZHNOCBlockParam *param = [[ZHNOCBlockParam alloc] init];
    param.paramType = ZHNOCBlockParamType_num;
    param.name = $4;
    [$1 addObject:param];
}
|block_params ',' WORD POINTER WORD {
    ZHNOCBlockParam *param = [[ZHNOCBlockParam alloc] init];
    param.paramType = ZHNOCBlockParamType_pointer;
    param.name = $5;
    [$1 addObject:param];
}
;

statement_expr :
|statement '=' expr_value ';' {
    ZHNOCAssignmentNode *node = [ZHNOCAssignmentNode ocnode];
    node.name = $1;
    node.value = $3;
    $$ = node;
    retainObj(node);
}
|expr_get_set '=' expr_value ';' {
    ZHNOCGetSetNode *node = $1;
    node.type = ZHNOCGetSetNodeType_set;
    node.value = $3;
    $$ = node;
}
|expr_value ';' {
    $$ = $1;
}
|RETURN expr_value ';' {
    ZHNOCReturnNode *node = [ZHNOCReturnNode ocnode];
    node.value = $2;
    $$ = node;
    retainObj(node);
}
;

statement :
|WORD WORD {
    $$ = $2;
}
|WORD POINTER WORD {
    $$ = $3;
}
;

method :
|'[' method_target method_param_list ']' {
    ZHNOCMethodNode *node = $3;
    node.targetNode = $2;
    $$ = node;
}
;

method_target :
|WORD {
    ZHNOCMethodTargetNode *node = [ZHNOCMethodTargetNode ocnode];
    node.targetName = $1;
    $$ = node;
    retainObj(node);
}
|method {
    ZHNOCMethodTargetNode *node = [ZHNOCMethodTargetNode ocnode];
    node.node = $1;
    $$ = node;
    retainObj(node);
}
;

method_param_list : {
    ZHNOCMethodNode *node = [ZHNOCMethodNode ocnode];
    $$ = node;
    retainObj(node);
}
|method_param_list method_param {
    ZHNOCMethodNode *node = $1;
    if ([$2 isKindOfClass:NSString.class]) {
        node.noParamSelectorName = $2;
    }
    else {
      [node addParamNode:$2];
    }
}
;

method_param :
|method_param_name expr_value {
    ZHNOCMethodParamNode *node = [ZHNOCMethodParamNode ocnode];
    node.name = $1;
    if ([$2 isKindOfClass:ZHNOCIfElseCondition.class]) {
        ZHNOCIfElseCondition *judge = $2;
        node.value = judge.value;
    }
    else {
      node.value = $2;
    }
    $$ = node;
    retainObj(node);
}
|WORD {
    $$ = $1;
}
;

method_param_name :
|WORD ':' {
    $$ = $1;
}
;

expr_judge_list:
| '(' expr_judge_list ')' {
    $$ = $2;
}
| expr_if_else_judge {
    $$ = $1;
}
| expr_judge_list JUDGE_AND expr_if_else_judge {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_and;
    $$ = node;
    retainObj(node);
}
| expr_judge_list JUDGE_OR expr_if_else_judge {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_or;
    $$ = node;
    retainObj(node);
}
;

expr_if_else_judge:
|expr_judge {
    $$ = $1;
}
|expr_value {
    $$ = $1;
}
;

expr_judge:
|expr_value EQUALTO expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_equal;
    $$ = node;
    retainObj(node);
}
|expr_value NOT_EQUALTO expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_notEqual;
    $$ = node;
    retainObj(node);
}
|expr_value GTEATER_OR_EQUALTO expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_greaterOrEqual;
    $$ = node;
    retainObj(node);
}
|expr_value LESS_OR_EQUALTO expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_lessOrEqual;
    $$ = node;
    retainObj(node);
}
|expr_value '>' expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_greater;
    $$ = node;
    retainObj(node);
}
|expr_value '<' expr_value {
    ZHNConditionNode *node = [ZHNConditionNode ocnode];
    node.value1 = $1;
    node.value2 = $3;
    node.conditionType = ZHNConditionNodeType_less;
    $$ = node;
    retainObj(node);
}
;

expr_get_set:
| WORD '.' WORD {
    ZHNOCGetSetNode *node = [ZHNOCGetSetNode ocnode];
    [node.names addObject:$1];
    [node.names addObject:$3];
    $$ = node;
    retainObj(node);
}
| expr_get_set '.' WORD {
    ZHNOCGetSetNode *node = (ZHNOCGetSetNode *)$1;
    [node.names addObject:$3];
}
;

expr_struct :
| WORD '(' expr_struct_value_list ')' {
    ZHNOCStructNode *node = [ZHNOCStructNode ocnode];
    node.cFuncName = $1;
    node.values = $3;
    $$ = node;
    retainObj(node);
}
;

expr_struct_value_list: {
    NSMutableArray *ary = [NSMutableArray array];
    $$ = ary;
    retainObj(ary);
}
|expr_struct_value_list expr_struct_value {
    [$1 addObject:$2];
}
;

expr_struct_value:
|NUM ',' {
    $$ = @($1);
}
|NUM {
    $$ = @($1);
}
;

calculate_expr:
|'(' calculate_expr ')' {
    $$ = $2;
}
|NUM
|calculate_expr PLUS calculate_expr {
    $$ = $1 + $3;
}
|calculate_expr MINUS calculate_expr {
    $$ = $1 - $3;
}
|calculate_expr DIVIDE calculate_expr {
    $$ = $1 / $3;
}
|calculate_expr POINTER calculate_expr {
    $$ = $1 * $3;
}
;

ppmm_expr:
|WORD PLUSPLUS {
    ZHNOCPPMMNode *node = [ZHNOCPPMMNode ocnode];
    node.name = $1;
    node.type = ZHNOCPPMMType_plusplus;
    retainObj(node);
    $$ = node;
}
|WORD MINUSMINUS {
    ZHNOCPPMMNode *node = [ZHNOCPPMMNode ocnode];
    node.name = $1;
    node.type = ZHNOCPPMMType_minusminus;
    retainObj(node);
    $$ = node;
}
;

for_expr :
| FOR '(' statement_expr expr_judge ';' ppmm_expr ')' '{' expr_list '}' {
    ZHNOCForCycleNode *node = [ZHNOCForCycleNode ocnode];
    node.assembleNode = $9;
    node.defineNode = $3;
    node.conditionNode = $4;
    node.operationNode = $6;
    retainObj(node);
    $$ = node;
}
| FOR '(' statement IN expr_value ')' '{' expr_list '}' {
    ZHNOCForInCycleNode *node = [ZHNOCForInCycleNode ocnode];
    retainObj(node);
    $$ = node;
    node.name = $3;
    node.valuesNode = $5;
    node.assembleNode = $8;
}
;

expr_value :
|'!' expr_value {
    ZHNOCIfElseCondition *judge;
    if ($2 == nil) {
        judge = instanceCondition(YES,@(1));
    }
    else if ([$2 isKindOfClass:ZHNOCIfElseCondition.class]) {
        ZHNOCIfElseCondition *condition = (ZHNOCIfElseCondition *)$2;
        if (condition.success) {
            judge = instanceCondition(NO,@(0));
        }
        else {
            judge = instanceCondition(YES,@(1));
        }
    }
    else {
        judge = instanceCondition(NO,@(0));
    }
    $$ = judge;
    retainObj(judge);
}
|calculate_expr {
    NSNumber *num = [NSNumber numberWithFloat:$1];
    $$ = num;
    retainObj(num);
}
|block_expr {
    $$ = $1;
}
|expr_struct {
    $$ = $1;
}
|expr_get_set {
    $$ = $1;
}
|method {
    $$ = $1;
}
|WORD {
    ZHNOCPointerWordNode *node = [ZHNOCPointerWordNode ocnode];
    node.name = $1;
    $$ = node;
    retainObj(node);
}
|NUM {
    if ($1 == 0) {
        id num = [NSNumber numberWithDouble:$1];
        ZHNOCIfElseCondition *judge = instanceCondition(NO,num);
        $$ = judge;
        retainObj(judge);
    }
    else {
        id num = [NSNumber numberWithDouble:$1];
        $$ = num;
        retainObj(num);
    }
}
|OC_STRING {
    NSMutableString *muStr = [$1 mutableCopy];
    muStr = [[muStr substringFromIndex:2] mutableCopy];
    NSString *str = [muStr substringToIndex:muStr.length - 1];
    $$ = str;
    retainObj(str);
}
|OC_YES {
    id num = [NSNumber numberWithInt:$1];
    ZHNOCIfElseCondition *judge = instanceCondition(YES,num);
    $$ = judge;
    retainObj(judge);
}
|OC_NO {
    id num = [NSNumber numberWithInt:$1];
    ZHNOCIfElseCondition *judge = instanceCondition(NO,num);
    $$ = judge;
    retainObj(judge);
}
|OC_NIL {
    $$ = nil;
}
;

%%

void retainObj(id obj) {
    if (gblObjs == nil) {
        gblObjs = [NSMutableArray array];
    }
    [gblObjs addObject:obj];
}

void releaseObjs(void) {
    [gblObjs removeAllObjects];
}

ZHNOCIfElseCondition* instanceCondition(BOOL success,id value) {
    ZHNOCIfElseCondition *judge = [ZHNOCIfElseCondition instance];
    judge.success = success;
    judge.value = value;
    retainObj(judge);
    return judge;
}

